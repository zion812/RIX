package com.rio.rostry.ui.dashboard

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.rio.rostry.auth.UserClaims
import com.rio.rostry.navigation.RIODestinations

/**
 * Dashboard for Farmer tier users
 * Provides fowl management, marketplace, and basic family tree features
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FarmerDashboard(
    claims: UserClaims,
    navController: NavController,
    onSignOut: () -> Unit
) {
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("RIO - Farmer Dashboard") },
                actions = {
                    IconButton(onClick = { navController.navigate(RIODestinations.PROFILE) }) {
                        Icon(Icons.Default.Person, contentDescription = "Profile")
                    }
                    IconButton(onClick = onSignOut) {
                        Icon(Icons.Default.ExitToApp, contentDescription = "Sign Out")
                    }
                }
            )
        },
        floatingActionButton = {
            FloatingActionButton(
                onClick = { navController.navigate(RIODestinations.FOWL_MANAGEMENT) }
            ) {
                Icon(Icons.Default.Add, contentDescription = "Add Fowl")
            }
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            item {
                FarmerWelcomeCard(claims = claims)
            }
            
            item {
                QuickStatsCard()
            }
            
            item {
                Text(
                    text = "Farmer Features",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )
            }
            
            items(getFarmerFeatures()) { feature ->
                FeatureCard(
                    feature = feature,
                    onClick = { navController.navigate(feature.destination) }
                )
            }
            
            item {
                EnthusiastUpgradeCard(
                    onUpgradeClick = { navController.navigate(RIODestinations.PROFILE) }
                )
            }
        }
    }
}

@Composable
private fun FarmerWelcomeCard(claims: UserClaims) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.primaryContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Welcome back, ${claims.displayName ?: "Farmer"}!",
                style = MaterialTheme.typography.headlineSmall,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Tier: ${claims.tier} ðŸšœ",
                style = MaterialTheme.typography.bodyMedium
            )
            Text(
                text = "Manage your fowl, track lineage, and grow your farm!",
                style = MaterialTheme.typography.bodyMedium
            )
        }
    }
}

@Composable
private fun QuickStatsCard() {
    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Quick Stats",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(12.dp))
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                StatItem(label = "Total Fowl", value = "0")
                StatItem(label = "Active Listings", value = "0")
                StatItem(label = "Messages", value = "0")
            }
        }
    }
}

@Composable
private fun StatItem(label: String, value: String) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = value,
            style = MaterialTheme.typography.headlineMedium,
            fontWeight = FontWeight.Bold,
            color = MaterialTheme.colorScheme.primary
        )
        Text(
            text = label,
            style = MaterialTheme.typography.bodySmall,
            color = MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}

@Composable
private fun EnthusiastUpgradeCard(onUpgradeClick: () -> Unit) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.tertiaryContainer
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "Unlock Enthusiast Features",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Upgrade to Enthusiast tier for advanced breeding analytics, detailed family trees, and premium marketplace features!",
                style = MaterialTheme.typography.bodyMedium
            )
            Spacer(modifier = Modifier.height(12.dp))
            Button(
                onClick = onUpgradeClick,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Upgrade to Enthusiast")
            }
        }
    }
}

private fun getFarmerFeatures(): List<DashboardFeature> {
    return listOf(
        DashboardFeature(
            title = "My Fowl",
            description = "Register and manage your fowl",
            icon = Icons.Default.Pets,
            destination = RIODestinations.FOWL_MANAGEMENT
        ),
        DashboardFeature(
            title = "Marketplace",
            description = "Buy, sell, and browse fowl",
            icon = Icons.Default.Store,
            destination = RIODestinations.MARKETPLACE
        ),
        DashboardFeature(
            title = "Family Tree",
            description = "Track lineage and breeding",
            icon = Icons.Default.AccountTree,
            destination = RIODestinations.FAMILY_TREE
        ),
        DashboardFeature(
            title = "Messages",
            description = "Chat with buyers and sellers",
            icon = Icons.Default.Chat,
            destination = RIODestinations.CHAT
        )
    )
}
