package com.rio.rostry.core.data.util

import android.content.Context
import android.content.Intent
import android.net.Uri
import androidx.core.content.FileProvider
import com.rio.rostry.core.data.model.FowlRecord
import com.rio.rostry.core.database.entities.FowlEntity
import java.io.File
import java.io.FileWriter
import java.text.SimpleDateFormat
import java.util.*

/**
 * Utility for exporting a fowl's timeline summary as text with low-res images
 * for trust-building outside the app
 */
class FowlTimelineExporter(private val context: Context) {
    
    private val dateFormat = SimpleDateFormat("MMM dd, yyyy", Locale.getDefault())
    private val dateTimeFormat = SimpleDateFormat("MMM dd, yyyy HH:mm", Locale.getDefault())
    
    /**
     * Export a fowl's timeline summary as text
     */
    fun exportTimelineAsText(
        fowl: FowlEntity,
        records: List<FowlRecord>,
        includeImages: Boolean = false
    ): Uri? {
        try {
            val exportDir = File(context.cacheDir, "exports").apply {
                if (!exists()) mkdirs()
            }
            
            val fileName = "fowl_timeline_${fowl.id}_${System.currentTimeMillis()}.txt"
            val file = File(exportDir, fileName)
            
            FileWriter(file).use { writer ->
                // Write fowl information
                writer.append("Fowl Timeline Summary\n")
                writer.append("====================\n\n")
                
                writer.append("Name: ${fowl.name ?: "N/A"}\n")
                writer.append("Breed: ${fowl.breedPrimary}")
                fowl.breedSecondary?.let { writer.append(" / $it") }
                writer.append("\n")
                writer.append("Generation: ${fowl.generation}\n")
                writer.append("DOB: ${dateFormat.format(fowl.dob)}\n\n")
                
                writer.append("Timeline Records:\n")
                writer.append("-----------------\n\n")
                
                // Write records
                if (records.isEmpty()) {
                    writer.append("No records available.\n")
                } else {
                    records.sortedByDescending { it.recordDate }.forEach { record ->
                        writer.append("${dateFormat.format(record.recordDate)} - ${record.recordType.replace("_", " ")}\n")
                        record.description?.let { writer.append("  $it\n") }
                        writer.append("  Proof documents: ${record.proofCount}\n\n")
                    }
                }
                
                writer.append("\nExported on: ${dateTimeFormat.format(Date())}\n")
                writer.append("Generated by ROSTRY Platform\n")
            }
            
            // Get URI for the file
            return FileProvider.getUriForFile(
                context,
                "${context.packageName}.fileprovider",
                file
            )
        } catch (e: Exception) {
            e.printStackTrace()
            return null
        }
    }
    
    /**
     * Share the exported timeline using an Intent
     */
    fun shareTimeline(
        fowl: FowlEntity,
        records: List<FowlRecord>,
        includeImages: Boolean = false
    ): Intent? {
        val uri = exportTimelineAsText(fowl, records, includeImages) ?: return null
        
        return Intent().apply {
            action = Intent.ACTION_SEND
            type = "text/plain"
            putExtra(Intent.EXTRA_STREAM, uri)
            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
            putExtra(
                Intent.EXTRA_SUBJECT,
                "Fowl Timeline Summary: ${fowl.name ?: fowl.id}"
            )
            putExtra(
                Intent.EXTRA_TEXT,
                "Attached is the timeline summary for ${fowl.name ?: "a fowl"} from the ROSTRY platform."
            )
        }
    }
    
    /**
     * Export a fowl's timeline summary as HTML (more formatted)
     */
    fun exportTimelineAsHtml(
        fowl: FowlEntity,
        records: List<FowlRecord>
    ): Uri? {
        try {
            val exportDir = File(context.cacheDir, "exports").apply {
                if (!exists()) mkdirs()
            }
            
            val fileName = "fowl_timeline_${fowl.id}_${System.currentTimeMillis()}.html"
            val file = File(exportDir, fileName)
            
            FileWriter(file).use { writer ->
                // Write HTML header
                writer.append("<!DOCTYPE html>\n")
                writer.append("<html>\n")
                writer.append("<head>\n")
                writer.append("<meta charset=\"UTF-8\">\n")
                writer.append("<title>Fowl Timeline Summary</title>\n")
                writer.append("<style>\n")
                writer.append("body { font-family: Arial, sans-serif; margin: 20px; }\n")
                writer.append("h1, h2 { color: #2c3e50; }\n")
                writer.append(".fowl-info { background-color: #ecf0f1; padding: 15px; border-radius: 5px; margin-bottom: 20px; }\n")
                writer.append(".record { border-left: 3px solid #3498db; padding: 10px; margin-bottom: 15px; }\n")
                writer.append(".record-date { font-weight: bold; color: #3498db; }\n")
                writer.append(".record-type { font-size: 1.1em; margin-bottom: 5px; }\n")
                writer.append(".record-description { margin: 5px 0; }\n")
                writer.append(".proof-info { color: #7f8c8d; font-size: 0.9em; }\n")
                writer.append("</style>\n")
                writer.append("</head>\n")
                writer.append("<body>\n")
                
                // Write fowl information
                writer.append("<h1>Fowl Timeline Summary</h1>\n")
                writer.append("<div class=\"fowl-info\">\n")
                writer.append("<h2>${fowl.name ?: "Unnamed Fowl"}</h2>\n")
                writer.append("<p><strong>Breed:</strong> ${fowl.breedPrimary}")
                fowl.breedSecondary?.let { writer.append(" / $it") }
                writer.append("</p>\n")
                writer.append("<p><strong>Generation:</strong> ${fowl.generation}</p>\n")
                writer.append("<p><strong>DOB:</strong> ${dateFormat.format(fowl.dob)}</p>\n")
                writer.append("</div>\n\n")
                
                writer.append("<h2>Timeline Records</h2>\n")
                
                // Write records
                if (records.isEmpty()) {
                    writer.append("<p>No records available.</p>\n")
                } else {
                    records.sortedByDescending { it.recordDate }.forEach { record ->
                        writer.append("<div class=\"record\">\n")
                        writer.append("<div class=\"record-date\">${dateFormat.format(record.recordDate)}</div>\n")
                        writer.append("<div class=\"record-type\">${record.recordType.replace("_", " ")}</div>\n")
                        record.description?.let { 
                            writer.append("<div class=\"record-description\">$it</div>\n") 
                        }
                        writer.append("<div class=\"proof-info\">Proof documents: ${record.proofCount}</div>\n")
                        writer.append("</div>\n")
                    }
                }
                
                writer.append("<p><em>Exported on: ${dateTimeFormat.format(Date())}<br>\n")
                writer.append("Generated by ROSTRY Platform</em></p>\n")
                writer.append("</body>\n")
                writer.append("</html>\n")
            }
            
            // Get URI for the file
            return FileProvider.getUriForFile(
                context,
                "${context.packageName}.fileprovider",
                file
            )
        } catch (e: Exception) {
            e.printStackTrace()
            return null
        }
    }
}