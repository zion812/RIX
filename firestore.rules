rules_version = '2';

// Firestore Security Rules for ROSTRY Poultry Platform
// Comprehensive security for poultry records, transfers, and marketplace

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserId() {
      return request.auth.uid;
    }

    function getUserTier() {
      return request.auth.token.tier;
    }

    // Schema validation for traceable listings
    function isValidTraceableListing() {
      let requiredFields = [
        'breedType',
        'age',
        'parentIds',
        'healthRecords',
        'verificationStatus',
        'lineageVerified',
        'ownerHistory'
      ];
      let ageSpecificFields = request.resource.data.age > 12 ? 
        ['breedingHistory', 'performanceMetrics'] : [];
      let allRequired = requiredFields.concat(ageSpecificFields);
      
      return allRequired.every(field => 
        request.resource.data[field] != null
      );
    }

    // Schema validation for non-traceable listings
    function isValidNonTraceableListing() {
      let requiredFields = [
        'breedType',
        'approximateAge',
        'currentHealth',
        'sellerVerification'
      ];
      return requiredFields.every(field => 
        request.resource.data[field] != null
      );
    }

    // ✅ Enhanced tier checking functions
    function isGeneralUser() {
      return getUserTier() == 'general';
    }

    function isFarmerOrHigher() {
      return getUserTier() in ['farmer', 'enthusiast'];
    }

    function isEnthusiastTier() {
      return getUserTier() == 'enthusiast';
    }

    function isOwner(userId) {
      return getUserId() == userId;
    }

    function isAdmin() {
      return getUserTier() == 'admin';
    }

    function isModerator() {
      return getUserTier() == 'moderator';
    }

    function isAdminOrModerator() {
      return isAdmin() || isModerator();
    }

    function isFarmer() {
      return getUserTier() == 'farmer';
    }

    function isEnthusiast() {
      return getUserTier() == 'enthusiast';
    }

    function isVerified() {
      return request.auth.token.verificationStatus.emailVerified == true;
    }

    // Check if a transfer log is in a final state (cannot be modified)
    function isTransferLogFinalized() {
      return resource.data.transferStatus in ['VERIFIED', 'REJECTED'];
    }

    // Marketplace listing rules
    match /databases/{database}/documents/marketplace/{listingId} {
      allow read: if isAuthenticated();
      allow create: if isFarmerOrHigher() 
        && (isValidTraceableListing() || isValidNonTraceableListing())
        && request.resource.data.sellerId == getUserId();
      allow update: if isOwner(resource.data.sellerId)
        && (isValidTraceableListing() || isValidNonTraceableListing())
        && unchanged(['sellerId', 'createdAt', 'listingType']);
      allow delete: if isOwner(resource.data.sellerId) || isAdminOrModerator();
    }

    function hasPermission(permission) {
      return request.auth.token.permissions[permission] == true;
    }

    // User profiles - users can read/write their own data
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdminOrModerator());
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Transfer logs - immutable once verified or rejected
    match /transfer_logs/{logId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.fromUserId) || 
                   isOwner(resource.data.toUserId) ||
                   isAdminOrModerator());
      
      // Only allow creation of new transfer logs
      allow create: if isAuthenticated() && 
                    isOwner(request.resource.data.fromUserId) &&
                    request.resource.data.fromUserId != request.resource.data.toUserId;
      
      // Only allow updates if not in final state
      allow update: if isAuthenticated() && 
                    (isOwner(resource.data.fromUserId) || isOwner(resource.data.toUserId)) &&
                    !isTransferLogFinalized() &&
                    validateTransferLogUpdate();
      
      // No deletions allowed
      allow delete: if false;
    }

    // Fowl records
    match /fowls/{fowlId} {
      allow read: if isAuthenticated();

      // Only farmers and enthusiasts can create fowls
      allow create: if isAuthenticated() &&
                   isFarmerOrHigher() &&
                   isOwner(request.resource.data.ownerId) &&
                   validateFowlCreation();

      allow update: if isAuthenticated() &&
                   isOwner(resource.data.ownerId) &&
                   isFarmerOrHigher() &&
                   validateFowlUpdate();

      allow delete: if isAuthenticated() &&
                   (isOwner(resource.data.ownerId) || isAdminOrModerator()) &&
                   isFarmerOrHigher();
    }

    // Fowl records/timeline events
    match /fowl_records/{recordId} {
      allow read: if isAuthenticated() &&
                  (isOwner(getFowlOwner(resource.data.fowlId)) || isAdminOrModerator());
      
      allow create: if isAuthenticated() &&
                    isFowlOwner(resource.data.fowlId);
      
      allow update: if isAuthenticated() &&
                    isFowlOwner(resource.data.fowlId) &&
                    validateFowlRecordUpdate();
      
      allow delete: if isAuthenticated() &&
                    isFowlOwner(resource.data.fowlId);
    }

    // Marketplace listings - tier-based feature restrictions
    match /marketplace/{listingId} {
      allow read: if isAuthenticated();

      // Basic listings for farmers, advanced for enthusiasts
      allow create: if isAuthenticated() &&
                   isFarmerOrHigher() &&
                   isOwner(request.resource.data.sellerId) &&
                   validateMarketplaceListing();

      allow update: if isAuthenticated() &&
                   isOwner(resource.data.sellerId) &&
                   validateMarketplaceUpdate();

      allow delete: if isAuthenticated() &&
                   (isOwner(resource.data.sellerId) || isAdminOrModerator());
    }

    // Messages - existing rules
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.senderId) || 
                   isOwner(resource.data.recipientId) ||
                   isAdminOrModerator());
      allow create: if isAuthenticated() && 
                    isOwner(request.resource.data.senderId) &&
                    request.resource.data.senderId != request.resource.data.recipientId;
      allow update: if false; // Messages are immutable
      allow delete: if false; // Messages cannot be deleted
    }

    // Notifications - users can read their own
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.userId) || isAdminOrModerator());
      allow write: if false; // Only Cloud Functions can create notifications
    }

    // ✅ Validation functions

    function validateFowlCreation() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'breed', 'ownerId', 'createdAt']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.breed is string &&
             data.breed.size() > 0;
    }

    function validateFowlUpdate() {
      let data = request.resource.data;
      // Cannot change ownership through update
      return !data.diff(resource.data).affectedKeys().hasAny(['ownerId']);
    }

    function validateMarketplaceListing() {
      let data = request.resource.data;
      let tier = getUserTier();

      // Basic validation
      if (!data.keys().hasAll(['title', 'sellerId', 'priceInCoins', 'fowlId'])) {
        return false;
      }

      // Tier-based feature validation
      if (tier == 'farmer') {
        // Farmers cannot use premium features
        return !data.keys().hasAny(['premiumFeatures', 'advancedAnalytics', 'priorityListing']);
      }

      // Enthusiasts can use all features
      return true;
    }

    function validateMarketplaceUpdate() {
      let data = request.resource.data;
      // Cannot change seller or fowl
      return !data.diff(resource.data).affectedKeys().hasAny(['sellerId', 'fowlId']);
    }

    function validateTransferLogUpdate() {
      let data = request.resource.data;
      // Cannot change core identifiers
      let immutableFields = ['fromUserId', 'toUserId', 'fowlId', 'initiatedAt'];
      return !data.diff(resource.data).affectedKeys().hasAny(immutableFields);
    }

    function isFowlOwner(fowlId) {
      // Get the fowl document and check if current user is owner
      return get(/databases/$(database)/documents/fowls/$(fowlId)).data.ownerId == getUserId();
    }

    function getFowlOwner(fowlId) {
      return get(/databases/$(database)/documents/fowls/$(fowlId)).data.ownerId;
    }

    function validateFowlRecordUpdate() {
      let data = request.resource.data;
      // Cannot change fowl association
      return !data.diff(resource.data).affectedKeys().hasAny(['fowlId']);
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}