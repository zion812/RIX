rules_version = '2';

// Firebase Storage Security Rules for ROSTRY Poultry Platform
// Optimized for fowl records, proof uploads, and media management

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper functions for user authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserId() {
      return request.auth.uid;
    }
    
    function getUserTier() {
      return request.auth.token.userTier;
    }
    
    function isOwner(userId) {
      return getUserId() == userId;
    }
    
    function isAdminOrModerator() {
      return getUserTier() in ['ADMIN', 'MODERATOR'];
    }
    
    function isValidImageType() {
      return request.resource.contentType.matches('image/.*');
    }
    
    function isValidDocumentType() {
      return request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.wordprocessingml.document');
    }
    
    function isWithinSizeLimit(maxSize) {
      return request.resource.size <= maxSize;
    }
    
    function isWithinRateLimit() {
      // Implement rate limiting logic
      return true; // Placeholder
    }
    
    // Fowl proof media - scoped to owners only
    match /users/{userId}/fowls/{fowlId}/proofs/{allPaths=**} {
      // Read access: Owner only (no public reads per requirements)
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Write access: Owner only with proper file type and size
      allow write: if isAuthenticated() && isOwner(userId) && isWithinRateLimit() &&
                   ((isValidImageType() && isWithinSizeLimit(5 * 1024 * 1024)) ||  // 5MB for images
                    (isValidDocumentType() && isWithinSizeLimit(10 * 1024 * 1024))); // 10MB for documents
    }
    
    // Fowl thumbnails - scoped to owners only
    match /users/{userId}/fowls/{fowlId}/thumbnails/{allPaths=**} {
      // Read access: Owner only (no public reads per requirements)
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Write access: Owner only with image type and size limits
      allow write: if isAuthenticated() && isOwner(userId) && isWithinRateLimit() &&
                   isValidImageType() && isWithinSizeLimit(1 * 1024 * 1024); // 1MB for thumbnails
    }
    
    // User profile images
    match /users/{userId}/profile/{allPaths=**} {
      // Read access: All authenticated users (for public profiles)
      allow read: if isAuthenticated();
      
      // Write access: Owner only with image type and size limits
      allow write: if isAuthenticated() && isOwner(userId) && isWithinRateLimit() &&
                   isValidImageType() && isWithinSizeLimit(2 * 1024 * 1024); // 2MB for profile images
    }
    
    // Transfer verification documents
    match /users/{userId}/transfers/{transferId}/verification/{allPaths=**} {
      // Read access: Transfer participants and admins only
      allow read: if isAuthenticated() && 
                  (isOwner(userId) || isTransferParticipant(transferId) || isAdminOrModerator());
      
      // Write access: Transfer initiator only
      allow write: if isAuthenticated() && isOwner(userId) && isWithinRateLimit() &&
                   ((isValidImageType() && isWithinSizeLimit(5 * 1024 * 1024)) ||
                    (isValidDocumentType() && isWithinSizeLimit(10 * 1024 * 1024)));
    }
    
    // System files and backups - admin only
    match /system/{allPaths=**} {
      allow read, write: if isAuthenticated() && isAdminOrModerator();
    }
    
    // Temporary upload area - for chunked uploads
    match /temp/uploads/{sessionId}/{allPaths=**} {
      allow read, write: if isAuthenticated() && 
                         isOwner(getSessionOwner(sessionId)) &&
                         isWithinRateLimit() &&
                         isWithinSizeLimit(100 * 1024 * 1024); // 100MB temp limit
    }
    
    // Export files - restricted per requirements
    match /users/{userId}/exports/{allPaths=**} {
      // Read access: Owner only
      allow read: if isAuthenticated() && isOwner(userId);
      
      // No write access - exports are generated by system
      allow write: if false;
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

// Helper functions that would be implemented with Firestore lookups
// These are placeholders for the actual implementation

function isTransferParticipant(transferId) {
  // Would check Firestore transfer_logs collection to verify user is participant
  return true; // Placeholder
}

function getSessionOwner(sessionId) {
  // Would extract user ID from session ID or check session collection
  return request.auth.uid; // Placeholder
}
